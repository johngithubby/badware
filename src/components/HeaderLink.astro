---
import type { HTMLAttributes } from "astro/types";

type Props = HTMLAttributes<"a">;

const {
	href,
	class: className,
	...props
} = Astro.props as Props & { href: string };
const base = import.meta.env.BASE_URL || "/";
const current = Astro.url.pathname; // already includes base when configured

// Build a target that definitely includes the base for comparison
function withBase(h: string) {
	if (!h.startsWith("/")) h = "/" + h;
	if (base !== "/" && !h.startsWith(base)) {
		// ensure single slash join
		h = base.replace(/\/$/, "") + h;
	}
	// ensure trailing slash handling consistency for home link
	if (h === base.replace(/\/$/, "")) h = base;
	return h;
}

const target = withBase(href);
const strip = (p: string) =>
	p.endsWith("/") && p.length > 1 ? p.slice(0, -1) : p;
const isActive = strip(current) === strip(target);
---

<a href={href} class:list={[className, { active: isActive }]} {...props}>
	<slot />
</a>
<style>
	a {
		display: inline-block;
		text-decoration: none;
	}
	a.active {
		font-weight: bolder;
		text-decoration: underline;
	}
</style>
